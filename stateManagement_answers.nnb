{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Introduction\r\n\r\nThis knowledge session is about state management with RX observables.\r\n\r\nSometimes we find ourselves in a situation where we have a stream of events, and we want to show the current state of something.\r\n\r\nA simple example is a bank account. You want to display the current balance but you only have a list (or stream) of transactions.\r\n\r\nIn dev language, the process we want to execute for this is called aggregation or reduction. Multiple events are aggregated or reduced to a single state.\r\n\r\nA popular library often used in the frontend to implement this pattern in a reactive way is called [redux](https://redux.js.org/), or one of its derivatives like [ngrx](https://ngrx.io/) or [ngxs](https://www.ngxs.io/).\r\n\r\nWe (currently) don't use any of those. Luckily this pattern is easily implementable in RX using the `scan` operator."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\r\n# The `reduce` operator\r\n\r\nThe `scan` operator looks a lot like the `reduce` operator. The major difference is that `reduce` works on arrays where `scan` works on observables. To get a feel for it, lets first look again what the `reduce` operator was for.\r\n\r\nSuppose I have a list of numbers."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const listOfNumbers = [1,2,3,4,5,6,7,8,9,10];"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Now I want to add all these numbers together. Of course we can use a for loop, but to demonstrate aggregations, lets use `reduce`."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "listOfNumbers\r\n  .reduce((aggregate, current) => aggregate + current, 0);\r\n\r\n// 55"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "What happens here?\r\nThe `reduce` operator takes an aggregation function that has 2 arguments:\r\n* The aggregate (or previous) value\r\n* The current value\r\n\r\nIt expects you to return a new value that combines the 2 somehow. In our case it adds them together. The next iteration the return value is passed as aggregate.\r\nOn the first iteration, the initial aggregate value (or seed) is passed, which in our case is 0 (passed as second argument of the `reduce` operator).\r\n\r\nSo in our case, the aggregation function is called like this:\r\n\r\n1. aggregationFunction(0, 1) -> 1\r\n2. aggregationFunction(1, 2) -> 3\r\n3. aggregationFunction(3, 3) -> 6\r\n4. aggregationFunction(6, 4) -> 10\r\n5. aggregationFunction(10, 5) -> 15\r\n6. aggregationFunction(15, 6) -> 21\r\n7. aggregationFunction(21, 7) -> 28\r\n8. aggregationFunction(28, 8) -> 36\r\n9. aggregationFunction(36, 9) -> 45\r\n10. aggregationFunction(45, 10) -> 55\r\n\r\nThe final aggregate value is returned which is 55.\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Assigment 1\r\n\r\nChange following statement such that it multiplies all numbers together, instead of adding them."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "listOfNumbers\r\n  .reduce((aggregate, current) => aggregate * current, 1);\r\n// 3628800"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Hint: If you keep getting zero, think of what happens when you pass 0 as first aggregate value."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## The `scan` operator\r\n\r\nThe `scan` operator for observables works almost exactly like the `reduce` operator from a list. See output of following code for the difference."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { from } from 'rxjs';\r\nimport { scan } from 'rxjs/operators';\r\n\r\n// Create an observable that emits the values from our list of numbers\r\nconst listOfNumbers$ = from(listOfNumbers);\r\n\r\n// Create a observable that emits our aggregation.\r\n// Note that scan is used instead of reduce.\r\nconst aggregation$ = listOfNumbers$.pipe(\r\n    scan((aggregate, current) => aggregate + current, 0));\r\n\r\n// If we subscribe it, note that we receive all intermediate\r\n// aggregation values as well.\r\naggregation$.subscribe(console.log);\r\n// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55\r\n\r\n// Give it some time to iterate the whole list.\r\nawait new Promise(resolve => setTimeout(resolve, 100));\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Assignment 2\r\n\r\nSee if you can change previous code again to output multiplications.\r\n\r\nFun fact: rxjs also knows the `reduce` operator. It has the exact same signature as `scan`, but acts a little different. See if you can use that instead of `scan` and find out how it behaves differently. Hint: Now you know about `Array.reduce` already, it should be quite obvious ;P"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# About the rest\r\n\r\nAs you can see, aggregation or reduction is a general concept and can be applied to lists and observables.\r\nFor demo purposes it is however easier to work with JavaScript Arrays than with Observable since it requires less boilerplate. Hence examples are done using Arrays in this doc.\r\n\r\nJust do as if the provided arrays are streams of values instead of lists of values. It's easily translatable."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Account balance example\r\n\r\nConsider the following models:"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// State\r\ntype Account = {\r\n    balance: number;\r\n}\r\n\r\n// Events\r\ntype CreditEvent = {\r\n    type: 'CreditEvent',\r\n    amount: number\r\n}\r\n\r\ntype DebitEvent = {\r\n    type: 'DebitEvent',\r\n    amount: number\r\n}\r\n\r\n// AccountEvent is one of above events.\r\ntype AccountEvent = CreditEvent | DebitEvent;\r\n\r\n// Type of function that returns an account given a stream of events\r\ntype GetAccount = (events: AccountEvent[]) => Account;\r\n\r\n// Handle a single event.\r\n// As input we get an account and an event.\r\n// As output we return a modified account\r\ntype HandleAccountEvent<TEvent extends AccountEvent> =\r\n    (account: Account, event: TEvent) => Account;\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Assignment 3\r\n\r\nLets define some helper functions to be able to implement our account function.\r\nFor every event we need to define a handler. (Or in Redux they are called reducers.) Add the missing handler(s):"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// One for every event\r\nconst handleCreditEvent: HandleAccountEvent<CreditEvent> =\r\n  (account, event) => ({\r\n    // With only one property, copying all other properties is not needed.\r\n    // But lets do it anyway since this is common practice and also future proof.\r\n    ...account,\r\n    balance: account.balance + event.amount\r\n  });\r\n\r\nconst handleDebitEvent: HandleAccountEvent<DebitEvent> =\r\n  (account, event) => ({\r\n    ...account,\r\n    balance: account.balance - event.amount\r\n  });\r\n\r\n// One to dispatch all events\r\nconst handleAccountEvent: HandleAccountEvent<AccountEvent> =\r\n  (account, event) => {\r\n    switch (event.type) {\r\n        case 'CreditEvent': return handleCreditEvent(account, event);\r\n        case 'DebitEvent': return handleDebitEvent(account, event);\r\n    }\r\n  }\r\n\r\n// An empty account\r\nconst emptyAccount: Account = { balance: 0 };\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Lets create some example account events:"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// Our account event stream. For demo now just an array.\r\nlet accountEvents: AccountEvent[] = [\r\n    {\r\n        type: 'CreditEvent',\r\n        amount: 10\r\n    }, {\r\n        type: 'CreditEvent',\r\n        amount: 100\r\n    }, {\r\n        type: 'DebitEvent',\r\n        amount: 30\r\n    }\r\n];\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Assignment 4\r\n\r\nNow you are asked to provide an implementation of our `GetAccount` function. Be sure to not use a `for` loop because `balanceEvents` is only an array for demo purposes, but would actually be an observable. But since most Array operators, like `reduce` (hint :P), are also available for observable, we can simply use those."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const getAccount: GetAccount =\r\n    events => events\r\n        .reduce(handleAccountEvent, emptyAccount);\r\n\r\ngetAccount(accountEvents);\r\n// {\r\n//  balance: 80\r\n// }\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# More advanced\r\n\r\nIn case of the bank account model, we have a nice single stream of account events so we can create a handler for each type. But the development world is not always this nice. E.g. consider this model loosely based on ACS for web clients:"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { Observable } from 'rxjs';\r\n\r\n// Idle state means call is gone.\r\ntype CallState = 'Accepted' | 'Connected' | 'OnHold' | 'Idle';\r\n\r\ntype CallParticipant = {\r\n    name: string;\r\n    address: string;\r\n}\r\n\r\ntype CallInfo = {\r\n    caller: CallParticipant;\r\n    callee: CallParticipant;\r\n}\r\n\r\ntype Call = {\r\n    id: string;\r\n    info$: Observable<CallInfo>;\r\n    state$: Observable<CallState>;\r\n}\r\n\r\ntype GetIncomingCalls = (userId: string) => Observable<Call>;\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Here we see a model with call objects. The objects themselves are not trivial data structures but have values that can change over time (except for the id), hence they are defined as `Observable`.\r\n\r\nNow suppose we are asked to implement a function that has the following signature:"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "type FlattenedCall = {\r\n    id: string;\r\n    info: CallInfo;\r\n    state: CallState;\r\n}\r\n\r\ntype GetCurrentCallList = (incomingCalls$: Observable<Call>) => Observable<FlattenedCall[]>;"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Lets analyze this. The input is an observable that emits new incoming calls. The output is an observable that emits a list of flattened calls. It looks like the output should represent a list of current calls with immutable data. Whenever something changes (a new call comes in, a call goes away, some call data changes), it should emit an updated list of calls.\r\n\r\nTo implement this, we can consider several approaches."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Approach 1: Map everything to events first\r\n\r\nThe original data structure doesn't contain events... We could however make something to convert this model into a stream of events first. So lets try this approach:\r\n\r\n* Convert model into a stream of events\r\n* Create handlers or reducers to handle the events and modify the state (which is `FlattenedCall[]`) accordingly\r\n* Use the `scan` operator to actually call the handlers based on the event stream\r\n\r\nLets see how that looks like. First lets define all events and handlers."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "//Declare event models\r\ntype CallAddedEvent = {\r\n    type: 'CallAddedEvent';\r\n    id: string;\r\n}\r\n\r\ntype CallRemovedEvent = {\r\n    type: 'CallRemovedEvent';\r\n    id: string;\r\n}\r\n\r\ntype CallStateChangeEvent = {\r\n    type: 'CallStateChangeEvent';\r\n    id: string;\r\n    newState: CallState;\r\n}\r\n\r\ntype CallInfoChangeEvent = {\r\n    type: 'CallInfoChangeEvent';\r\n    id: string;\r\n    newInfo: CallInfo;\r\n}\r\n\r\ntype CallEvent = CallAddedEvent | CallRemovedEvent | CallStateChangeEvent | CallInfoChangeEvent;\r\n\r\ntype HandleCallEvent<T extends CallEvent> = (state: FlattenedCall[], event: T) => FlattenedCall[];\r\n\r\nconst emptyCallParticipant: CallParticipant = { name: '', address: '' };\r\nconst emptyCall: FlattenedCall = {\r\n    id: '',\r\n    info: { caller: emptyCallParticipant, callee: emptyCallParticipant },\r\n    state: 'Accepted',\r\n};\r\n\r\n// Declare event handlers:\r\nconst handleCallAddedEvent: HandleCallEvent<CallAddedEvent> =\r\n    (state, event) =>\r\n        // Make sure to use immutable methods. So not .push, but .concat to add an element.\r\n        state.concat([{ ...emptyCall, id: event.id }]);\r\n\r\nconst handleCallRemovedEvent: HandleCallEvent<CallRemovedEvent> =\r\n    (state, event) =>\r\n        state.filter(call => call.id !== event.id);\r\n\r\nconst handleCallStateChangeEvent: HandleCallEvent<CallStateChangeEvent> =\r\n    (state, event) =>\r\n        state.map(call =>\r\n            call.id === event.id\r\n            ? { ...call, state: event.newState }\r\n            : call\r\n        );\r\n\r\nconst handleCallInfoChangeEvent: HandleCallEvent<CallInfoChangeEvent> =\r\n    (state, event) =>\r\n        state.map(call =>\r\n            call.id === event.id\r\n            ? { ...call, info: event.newInfo }\r\n            : call\r\n        );\r\n\r\nconst handleCallEvent: HandleCallEvent<CallEvent> =\r\n    (state, event) => {\r\n        switch (event.type) {\r\n            case 'CallAddedEvent':       return handleCallAddedEvent(state, event);\r\n            case 'CallRemovedEvent':     return handleCallRemovedEvent(state, event);\r\n            case 'CallStateChangeEvent': return handleCallStateChangeEvent(state, event);\r\n            case 'CallInfoChangeEvent':  return handleCallInfoChangeEvent(state, event);\r\n        }\r\n    }\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Now lets create a function that translates the `Observable<Call>` into a stream of events: `Observable<CallEvent>`."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { switchMap, map, takeWhile } from 'rxjs/operators';\r\nimport { concat, of, merge, Observable } from 'rxjs';\r\n\r\nconst toCallEvent$ = (incomingCall$: Observable<Call>): Observable<CallEvent> =>\r\n  incomingCall$.pipe(\r\n    // for every new call, start monitoring it...\r\n    switchMap(newCall => merge([\r\n      // Handle call lifetime.\r\n      // Start with CallAddedEvent. Wait until it becomes 'Idle', and then end with CallRemovedEvent\r\n      concat(\r\n        of<CallAddedEvent>({ type: 'CallAddedEvent', id: newCall.id }),\r\n        newCall.state$.pipe(takeWhile(state => state !== 'Idle')),\r\n        of<CallRemovedEvent>({ type: 'CallRemovedEvent', id: newCall.id }),\r\n      ),\r\n      // Monitor state and info to emit CallStateChangeEvent and CallInfoChangeEvent events.\r\n      newCall.state$.pipe(\r\n        map((newState): CallStateChangeEvent => ({ type: 'CallStateChangeEvent', id: newCall.id, newState }))),\r\n      newCall.info$.pipe(\r\n        map((newInfo): CallInfoChangeEvent => ({ type: 'CallInfoChangeEvent', id: newCall.id, newInfo })))\r\n    ])));"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Assignment 5\r\n\r\nNow we have everything to finally implement `GetCurrentCallList`. So, put it all together:"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { scan } from 'rxjs/operators';\r\n\r\nconst getCurrentCallList: GetCurrentCallList =\r\n    incomingCall$ =>\r\n        incomingCall$.pipe(\r\n            // Use the function above to convert the incoming call stream\r\n            // into an event stream\r\n            toCallEvent$,\r\n            // Handle the events. In other words: reduce the events into current state\r\n            // which is the current list of calls.\r\n            scan(handleCallEvent, []));"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "This method works. But, as you can see, it requires a lot of boilerplate. And this is a reduced example with only 4 events.\r\n\r\nTo reduce a bit of the boilerplate, I want to introduce a new pattern which we can use to merge the creation of the event and handling it. I call it 'the action pattern'."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## The action pattern\r\n\r\nTo show the action pattern in action, lets go back to the simpler `Account` example first to demonstrate it. Although the Account example barely benefits from it since there is already an event stream, it's still a good way to show it in action.\r\n\r\nConsider following definition:\r\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "type AccountAction = (account: Account) => Account;"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Here we introduce a new function type which takes an `Account` and returns an `Account`. The idea is that it represents a function that 'acts' on an account and returns a new version of it.\r\n\r\nNow consider this:"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// Remember: in our account example we use arrays instead of observables. \r\nconst toAccountActions = (events: AccountEvent[]): AccountAction[] =>\r\n    events\r\n    .map((event): AccountAction => account => handleAccountEvent(account, event));\r\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "What... tf... is this...?\r\n\r\nLet's analyze... First look at the type of this `toAccountActions` function.\r\n\r\nIt takes in a list of account events, and returns a list of account actions. Ok, but an account _action_ is a _function_. So basically... it converts (`map`s) every event into a function. A function that takes an account and returns an account.\r\n\r\nHow does that function look like? Well, see this part:\r\n\r\n```javascript\r\naccount => handleAccountEvent(account, event)\r\n```\r\n\r\nSo indeed, this function takes an account, then passes it through `handleAccountEvent` which returns a changed account.\r\n\r\nOk... So now we have this `AccountAction` list. What shall we do with it?"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Assignment 6\r\n\r\nReimplement the `GetAccount` function using `toAccountActions`.\r\n\r\nHint: Look at the types of the 2 reducer arguments. See how you can put them together."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const getAccount2: GetAccount =\r\n    events => toAccountActions(events)\r\n        .reduce((account, action) => action(account), emptyAccount);\r\n\r\ngetAccount2(accountEvents);\r\n// {\r\n//  balance: 80\r\n// }"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Ok, lets see what we just did.\r\nFirst we created a list of account actions. After that, we reduced those actions into state. How did we do that? By using `reduce` to simply execute those actions."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Why is this useful?\r\n\r\nAs you can see, in our account example this doesn't look very useful. We even added a step by converting events into actions first using the existing event handler.\r\n\r\nBut in other cases there are no events. See the `Call` example. So in those cases we can now choose:\r\n* Convert the original model into a stream of events\r\n* Convert the original model into a stream of actions\r\n\r\nIn the first case, like what we saw, we have to define events first and then define handlers or reducers to handle them.\r\n\r\nIn the second case, as what you'll see here, you can combine those steps. Because an action 'handler' is just a simple call to the action. So now we just have to create actions out of the original model.\r\n\r\nLets see it in action:"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "type CallAction = (calls: FlattenedCall[]) => FlattenedCall[];\r\ntype SingleCallAction = (call: FlattenedCall) => FlattenedCall;\r\n\r\n// Convert an action on a single call, to an action on the call list.\r\nconst handleSingleCall = (id: string, action: SingleCallAction): CallAction => calls =>\r\n        calls.map(call =>\r\n            call.id === id\r\n            ? action(call)\r\n            : call\r\n        );\r\n\r\nconst toCallAction$ = (incomingCall$: Observable<Call>): Observable<CallAction> =>\r\n  incomingCall$.pipe(\r\n    // for every new call, start monitoring it...\r\n    switchMap(newCall => merge([\r\n      // Handle call lifetime.\r\n      // Start with add call action. Wait until it becomes 'Idle', and then end with call remove action\r\n      concat(\r\n        // Emit an add call action\r\n        of<CallAction>(calls => calls.concat([{ ...emptyCall, id: newCall.id }])),\r\n        newCall.state$.pipe(takeWhile(state => state !== 'Idle')),\r\n        // Emit a call remove action\r\n        of<CallAction>(calls => calls.filter(call => call.id !== newCall.id )),\r\n      ),\r\n      // Monitor state and info to emit Call State Change and Call Info Change actions.\r\n      newCall.state$.pipe(\r\n        map((newState): CallAction => handleSingleCall(newCall.id, call => ({...call, state: newState })))),\r\n      newCall.info$.pipe(\r\n        map((newInfo): CallAction => handleSingleCall(newCall.id, call => ({...call, info: newInfo })))),\r\n    ])));"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "This `toCallAction$` may look complex and dounting at first. It takes a while to see whats going on. But, if you compare it to `toCallEvent$`, it doesn't look that different. And now you don't need all the boilerplate to create the events and the event handlers."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Assignment 7\r\n\r\nNow the only thing left is, implementing the `GetCurrentCallList` function. Instead of `toCallEvent$` we will now use `toCallAction$`.\r\n\r\nSee if you can implement the reducer (handler) in the `scan` function.\r\n\r\nHint: Look at previous assignment. But since we work with observables now, we use `scan` instead of `reduce`."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const getCurrentCallList2: GetCurrentCallList =\r\n    incomingCall$ =>\r\n        incomingCall$.pipe(\r\n            // Use the function above to convert the incoming call stream\r\n            // into a stream of actions\r\n            toCallAction$,\r\n            // Handle the actions by simply executing them\r\n            scan((calls, action) => action(calls), []));"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Comparison and final thoughts\r\n\r\nAs said, the action pattern can look dounting. But if you compare `toCallAction$` to `toCallEvent$`, it doesn't look that much different.\r\n\r\nSo I state that the complexity comes from reducing a model to current state and not from the action pattern itself. Also the action pattern requires a lot less boilerplate.\r\n\r\nWhen you learn to recognize the action pattern, you'll see that it becomes easier to reason about what happens."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Conclusion\r\n\r\nThis concludes our journey through state management.\r\n\r\nWe learned what _aggregation_ or _reduction_ means in programming terms. In reactive programming, it means it is reducing a stream of events into (a stream of) current state.\r\n\r\nAs an example, we can reduce a stream of bank account transactions into a (stream of) bank account state with a current balance.\r\n\r\nWe also learned that not all models emit a neat stream of events. And we learned a technique to deal with that: 'the action pattern'. This way we can still extract 'current state' from such models in a way that doesn't need too much boilerplate.\r\n\r\nIt would be nice if you at least learn to recognize the action pattern. You might see it in action in PcaAttendantWeb in a few places. For a relatively small one, see e.g. `popup.service.ts`."
            ],
            "outputs": []
        }
    ]
}